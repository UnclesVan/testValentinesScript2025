-- Client-side script (LocalScript in StarterGui or a ScreenGui within PlayerGui)

-- GUI Elements (created dynamically)
local Player = game.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Create GUI Elements
local ba = Instance.new("ScreenGui")
local ca = Instance.new("TextLabel") -- Main Label
local ab = Instance.new("TextLabel") -- Status Label
local afkTimerLabel = Instance.new("TextLabel") -- Timer label

-- Properties
ba.Name = "ba"
ba.Parent = PlayerGui
ba.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Setup main label properties
ca.Name = "ca"
ca.Parent = ba
ca.Active = true
ca.BackgroundTransparency = 1
ca.Position = UDim2.new(0.01, 0, 0.01, 0)
ca.Size = UDim2.new(0, 500, 0, 120)
ca.Font = Enum.Font.SourceSansSemibold
ca.Text = "Anti AFK Script"
ca.TextColor3 = Color3.new(0, 1, 0)
ca.TextSize = 64
ca.TextStrokeTransparency = 0
ca.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
ca.TextXAlignment = Enum.TextXAlignment.Left

-- Setup status label properties
ab.Name = "ab"
ab.Parent = ba
ab.BackgroundTransparency = 1
ab.Position = UDim2.new(0.01, 0, 0.2, 0)
ab.Size = UDim2.new(0, 500, 0, 120)
ab.Font = Enum.Font.ArialBold
ab.Text = "Status: Active"
ab.TextColor3 = Color3.new(0, 1, 0)
ab.TextStrokeTransparency = 0
ab.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
ab.TextSize = 64
ab.TextXAlignment = Enum.TextXAlignment.Left

-- Setup AFK timer label properties
afkTimerLabel.Name = "afkTimerLabel"
afkTimerLabel.Parent = ba
afkTimerLabel.BackgroundTransparency = 1
afkTimerLabel.Position = UDim2.new(0.01, 0, 0.39, 0)
afkTimerLabel.Size = UDim2.new(0, 500, 0, 120)
afkTimerLabel.Font = Enum.Font.Arial
afkTimerLabel.Text = "Total Time: 0s"
afkTimerLabel.TextColor3 = Color3.new(0, 1, 0)
afkTimerLabel.TextSize = 64
afkTimerLabel.TextStrokeTransparency = 0
afkTimerLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
afkTimerLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Anti-AFK Logic: Uses VirtualUser to simulate input
local VirtualUser = game:GetService("VirtualUser")
local afkTimer = 0

-- Function to update the AFK timer
local function updateAfkTimer()
    while true do
        task.wait(1)
        afkTimer = afkTimer + 1
        afkTimerLabel.Text = "Total Time: " .. afkTimer .. "s"
    end
end

-- Start the timer loop in a coroutine
coroutine.wrap(updateAfkTimer)()

-- Function to handle when the player becomes idle
local function onIdled()
    -- Simulate clicking the second mouse button (right-click)
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())

    ab.Text = "Roblox tried to kick you but I kicked him instead"
    task.wait(2)
    ab.Text = "Status: Active"
end

-- Connect the Idled event to the anti-AFK function
Player.Idled:Connect(onIdled)

print("Anti AFK has been enabled.")





local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" }),
    Shop = Window:AddTab({ Title = "Adopt Me Shop In BETA", Icon = "shopping-cart" }),
    ValentinesEvent = Window:AddTab({ Title = "Valentines Event", Icon = "" }),
}

local Options = Fluent.Options
local shopGui -- Variable to hold the shop GUI instance

-- Create Shop GUI function
local function createShopGui()
    local player = Players.LocalPlayer

    -- Create the ScreenGui
    shopGui = Instance.new("ScreenGui")
    shopGui.Name = "ShopScreenGui"
    shopGui.Parent = player:WaitForChild("PlayerGui") -- Ensure it's parented properly

    -- Create the Main Frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0.4, 0, 0.6, 0)
    frame.Position = UDim2.new(0.3, 0, 0.2, 0)
    frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    frame.BackgroundTransparency = 0.2
    frame.Parent = shopGui

    -- Create rounded corners for the frame
    local corner = Instance.new("UICorner")
    corner.Parent = frame

    -- Create a Close Button
    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0.1, 0, 0.05, 0)
    closeButton.Position = UDim2.new(0.85, 0, 0.05, 0)
    closeButton.Text = "Close"
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.BackgroundColor3 = Color3.fromRGB(150, 0, 10)
    closeButton.BackgroundTransparency = 0.2
    closeButton.Font = Enum.Font.SourceSansBold
    closeButton.TextSize = 14
    closeButton.Parent = frame

    -- Connect the Close Button to hide the GUI
    closeButton.MouseButton1Click:Connect(function()
        shopGui.Enabled = false -- Hide the GUI instead of destroying it
    end)

    -- Set up items (same as your existing shop setup)
    local shopCategories = {  
        ["Pets"] = {
            {name = "lvalentines_2025_love_bird", maxAmount = 10, stock = 15},
            {name = "royal_egg", maxAmount = 10, stock = 15},
            {name = "cracked_egg", maxAmount = 10, stock = 15}, 
            {name = "lunar_2025_gilded_snake", maxAmount = 10, stock = 0},
            {name = "lunar_2025_prism_snake", maxAmount = 10, stock = 0},
            {name = "garden_2024_egg", maxAmount = 10, stock = 0},
            {name = "moon_royal_egg", maxAmount = 10, stock = 0},
        },
        ["Food"] = {
            {name = "tiny_pet_age_potion", maxAmount = 5, stock = 20},
            {name = "deluxe_pet_age_potion", maxAmount = 5, stock = 10},
        },
        ["Toys"] = {
            {name = "tiny_pet_toy", maxAmount = 5, stock = 15},
            {name = "deluxe_pet_toy", maxAmount = 5, stock = 10},
        }
    }

    -- Create a Tab Panel for each category
    local tabPanel = Instance.new("Frame")
    tabPanel.Size = UDim2.new(1, 0, 1, 0)
    tabPanel.Position = UDim2.new(0, 0, 0.1, 0)
    tabPanel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    tabPanel.BackgroundTransparency = 0.2
    tabPanel.Parent = frame

    -- Create tabs
    local tabs = {}
    local tabIndex = 1
    for category, items in pairs(shopCategories) do
        local tab = Instance.new("TextButton")
        tab.Size = UDim2.new(0.2, 0, 0.05, 0)
        tab.Position = UDim2.new((tabIndex - 1) * 0.2, 0, 0, 0)
        tab.Text = category
        tab.TextColor3 = Color3.fromRGB(255, 255, 255)
        tab.BackgroundColor3 = Color3.fromRGB(150, 0, 10)
        tab.Font = Enum.Font.SourceSansBold
        tab.TextSize = 14
        tab.Parent = tabPanel

        -- Create content for each tab
        local tabFrame = Instance.new("Frame")
        tabFrame.Size = UDim2.new(1, 0, 0.8, 0)
        tabFrame.Position = UDim2.new(0, 0, 0.1, 0)
        tabFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        tabFrame.BackgroundTransparency = 1
        tabFrame.Visible = tabIndex == 1
        tabFrame.Parent = tabPanel

        -- Create the items within each tab
        local itemIndex = 1
        for _, item in pairs(items) do
            local itemFrame = Instance.new("Frame")
            itemFrame.Size = UDim2.new(1, 0, 0.1, 0)
            itemFrame.Position = UDim2.new(0, 0, (itemIndex - 1) * 0.1, 0)
            itemFrame.BackgroundColor3 = Color3.fromRGB(230, 230, 230)
            itemFrame.Parent = tabFrame

            -- Create rounded corners for the frame
            local itemCorner = Instance.new("UICorner")
            itemCorner.Parent = itemFrame

            -- Create a Label within the item frame
            local label = Instance.new("TextLabel")
            label.Size = UDim2.new(0.5, 0, 1, 0)
            label.Position = UDim2.new(0, 0, 0, 0)
            label.Text = item.name
            label.TextColor3 = Color3.fromRGB(0, 0, 0)
            label.Font = Enum.Font.SourceSansBold
            label.TextSize = 20
            label.Parent = itemFrame

            -- Create a Frame for availability sign
            local availableFrame = Instance.new("Frame")
            availableFrame.Size = UDim2.new(0.2, 0, 1, 0)
            availableFrame.Position = UDim2.new(0.80, 0, 0, 0) -- Right aligned
            availableFrame.BackgroundTransparency = 1
            availableFrame.Parent = itemFrame

            -- Create a TextLabel for availability text
            local availableSign = Instance.new("TextLabel")
            availableSign.Size = UDim2.new(1, 0, 1, 0)
            availableSign.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red color for out of stock
            availableSign.Font = Enum.Font.SourceSansBold
            availableSign.TextSize = 18
            availableSign.BackgroundTransparency = 1
            availableSign.Parent = availableFrame

            -- Update availability based on stock
            if item.stock <= 0 then
                availableSign.Text = "OUT OF STOCK"
            else
                availableSign.Text = "AVAILABLE"
            end

            -- Create UI elements within the item frame
            local textbox = Instance.new("TextBox")
            textbox.Size = UDim2.new(0.15, 0, 1, 0)
            textbox.Position = UDim2.new(0.5, 0, 0, 0)
            textbox.PlaceholderText = "Amount (max " .. item.maxAmount .. ")"
            textbox.TextColor3 = Color3.fromRGB(0, 0, 0)
            textbox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            textbox.Font = Enum.Font.SourceSans
            textbox.TextSize = 18
            textbox.ClearTextOnFocus = true
            textbox.Parent = itemFrame

            local buyButton = Instance.new("TextButton")
            buyButton.Size = UDim2.new(0.15, 0, 1, 0)
            buyButton.Position = UDim2.new(0.65, 0, 0, 0)
            buyButton.Text = "Buy"
            buyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            buyButton.BackgroundColor3 = Color3.fromRGB(0, 150, 0)
            buyButton.Font = Enum.Font.SourceSansBold
            buyButton.TextSize = 20
            buyButton.Parent = itemFrame

            local buttonCorner = Instance.new("UICorner")
            buttonCorner.Parent = buyButton

            -- Connect buy button to the purchase logic
            buyButton.MouseButton1Click:Connect(function()
                local buyCount = tonumber(textbox.Text) or 0
                if buyCount > 0 and buyCount <= item.maxAmount and item.stock >= buyCount then
                    local args = {
                        [1] = category:lower():gsub(" ", "_"),
                        [2] = item.name,
                        [3] = { ["buy_count"] = buyCount }
                    }
                    -- Attempt the purchase
                    local success, errorMessage = pcall(function()
                        print("Attempting to buy " .. buyCount .. " of " .. item.name) -- Debug message
                        game:GetService("ReplicatedStorage").API:FindFirstChild("ShopAPI/BuyItem"):InvokeServer(unpack(args))
                    end)

                    if success then
                        -- Only update stock if the purchase was successful
                        item.stock = item.stock - buyCount
                        availableSign.Text = item.stock <= 0 and "OUT OF STOCK" or "AVAILABLE" -- Update availability
                        textbox.Text = "" -- Clear the textbox after a successful purchase
                        print("Purchased " .. buyCount .. " of " .. item.name) -- Success message
                    else
                        print("Failed to buy item: " .. (errorMessage or "Unknown Error")) -- Error handling
                    end
                else
                    print("Invalid amount! Please enter a valid number.") -- Debug message
                end
            end)

            itemIndex = itemIndex + 1
        end

        tab.MouseButton1Click:Connect(function()
            for _, tab in pairs(tabs) do
                tab.Frame.Visible = false
            end
            tabFrame.Visible = true
        end)

        tabs[tabIndex] = {Tab = tab, Frame = tabFrame}
        tabIndex = tabIndex + 1
    end
end

-- Function to dehash remotes when button is pressed
local function dehashRemotes()
    local Fsys = require(game.ReplicatedStorage:WaitForChild("Fsys")).load

    -- Get the init function from RouterClient
    local initFunction = Fsys("RouterClient").init

    -- Folder containing the remotes to track
    local remoteFolder = game.ReplicatedStorage:WaitForChild("API")

    -- A flag to ensure we print only once during the initial scan
    local printedOnce = false

    -- Function to inspect upvalues and identify remotes
    local function inspectUpvalues()
        local remotes = {}  -- Table to collect remotes

        for i = 1, math.huge do
            local success, upvalue = pcall(getupvalue, initFunction, i)
            if not success then
                break
            end
            
            -- If the upvalue is a table, let's check its contents
            if typeof(upvalue) == "table" then
                for k, v in pairs(upvalue) do
                    -- Check for RemoteEvents, RemoteFunctions, BindableEvents, and BindableFunctions
                    if typeof(v) == "Instance" then
                        if v:IsA("RemoteEvent") or v:IsA("RemoteFunction") or v:IsA("BindableEvent") or v:IsA("BindableFunction") then
                            -- Log the key, type of value, and value
                            table.insert(remotes, {key = k, remote = v})
                            -- If it's the first time scanning, print remote information
                            if not printedOnce then
                                print("Key: " .. k .. " Type: " .. typeof(k) .. ", Value Type: " .. typeof(v))
                                print("Found remote: " .. v:GetFullName())
                            end
                        end
                    end
                end
            end
        end

        return remotes
    end

    -- Function to rename remotes based on their key
    local function rename(remote, key)
        local nameParts = string.split(key, "/")  -- Split the key by "/"
        if #nameParts > 1 then
            local remotename = table.concat(nameParts, "/", 1, 2)  -- Join the first two parts
            remote.Name = remotename
        else
            warn("Invalid key format for remote: " .. key)  -- Notify if the key format is incorrect
        end
    end

    -- Function to rename all existing remotes in the folder
    local function renameExistingRemotes()
        local remotes = inspectUpvalues()

        -- Rename all collected remotes based on the key
        for _, entry in ipairs(remotes) do
            rename(entry.remote, entry.key)
        end
    end

    -- Function to display dehashed message
    local function displayDehashedMessage()
        local uiElement = game:GetService("Players").LocalPlayer.PlayerGui.HintApp.LargeTextLabel
        uiElement.Text = "Remotes have been Dehashed!"
        uiElement.TextColor3 = Color3.fromRGB(0, 255, 0)  -- Set text color to green
        wait(3)
        uiElement.Text = ""
        uiElement.TextColor3 = Color3.fromRGB(255, 255, 255)  -- Reset text color to default (white)
    end

    -- Monitor for new remotes added to the folder
    local function monitorForNewRemotes()
        remoteFolder.ChildAdded:Connect(function(child)
            if child:IsA("RemoteEvent") or child:IsA("RemoteFunction") or child:IsA("BindableEvent") or child:IsA("BindableFunction") then
                print("New remote added: " .. child:GetFullName())
                -- Check and rename the new remote
                local remotes = inspectUpvalues()
                for _, entry in ipairs(remotes) do
                    rename(entry.remote, entry.key)
                end
            end
        end)
    end

    -- Coroutine for periodic check without freezing
    local function periodicCheck()
        while true do
            task.wait(10)  -- Check every 10 seconds (can adjust based on your needs)
            -- Scan and rename existing remotes periodically
            pcall(renameExistingRemotes)
        end
    end

    -- Start the periodic check in a coroutine (non-blocking)
    coroutine.wrap(periodicCheck)()

    -- Initial scan and rename for all existing remotes (print once)
    renameExistingRemotes()

    -- Display dehashed message
    displayDehashedMessage()

    -- Set the flag to prevent printing more than once
    printedOnce = true

    print("Script initialized and monitoring remotes.")
end

-- Teleportation Variables
local isTeleportingEnabled = false
local teleportFrequency = 0.5
local allRoseParts = {}
local allHeartParts = {}

local function getAllPartsRecursive(parent, partsTable)
    for _, child in ipairs(parent:GetChildren()) do
        if child:IsA("BasePart") then
            table.insert(partsTable, child)
        elseif child:IsA("Model") or child:IsA("Folder") then
            getAllPartsRecursive(child, partsTable)
        end
    end
end

local function updateHeartParts(heartsFolder)
    allHeartParts = {}
    if heartsFolder then
        for _, heart in ipairs(heartsFolder:GetChildren()) do
            if heart.Name == "CupidHeart" then
                local collider = heart:FindFirstChild("Collider")
                if collider then
                    getAllPartsRecursive(collider, allHeartParts)
                end
            end
        end
    else
        print("Hearts folder not found. Only teleporting to roses.")
    end
end

local function teleportSmoothly(humanoidRootPart, targetCFrame, duration)
    if not humanoidRootPart then return end

    local startCFrame = humanoidRootPart.CFrame
    local startTime = os.clock()
    local elapsedTime = 0

    while elapsedTime < duration do
        elapsedTime = os.clock() - startTime
        local alpha = math.min(elapsedTime / duration, 1)
        humanoidRootPart.CFrame = startCFrame:Lerp(targetCFrame, alpha)
        RunService.Heartbeat:Wait()
    end

    humanoidRootPart.CFrame = targetCFrame
end

local function getRandomHeartPart()
    if #allHeartParts == 0 then return nil end
    local randomIndex = math.random(1, #allHeartParts)
    return allHeartParts[randomIndex]
end

local function startTeleporting()
    local player = Players.LocalPlayer
    local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

    local valentinesFolder = Workspace:FindFirstChild("StaticMap") and Workspace.StaticMap:FindFirstChild("Valentines2025")
    if not valentinesFolder then
        warn("Valentines2025 folder not found. Script will not run.")
        return
    end

    local rosePath = valentinesFolder:FindFirstChild("Rose_Paths")
    local heartsFolder = valentinesFolder:FindFirstChild("Hearts")

    if rosePath then
        getAllPartsRecursive(rosePath, allRoseParts)
        print("Using Rose_Paths as primary path.")
    else
        warn("Rose_Paths is nil! No primary path to use.")
        return
    end

    updateHeartParts(heartsFolder)

    -- Main teleportation loop
    while isTeleportingEnabled do
        for _, rosePart in ipairs(allRoseParts) do
            if not isTeleportingEnabled then break end -- Check if teleporting is still enabled

            if rosePart and humanoidRootPart then
                teleportSmoothly(humanoidRootPart, rosePart.CFrame + Vector3.new(0, 2, 0), 0.1)
                task.wait(teleportFrequency)
                local heartPart = getRandomHeartPart()
                if heartPart then
                    teleportSmoothly(humanoidRootPart, heartPart.CFrame + Vector3.new(0, 2, 0), 0.1)
                end
            else
                warn("Rose part not found!")
            end
        end

        task.wait(0.05) -- Add a small break to prevent excessive processing in the loop
    end
end

-- Toggle for teleportation
local teleportToggle = Tabs.ValentinesEvent:AddToggle("EnableTeleportation", {
    Title = "Enable Teleportation",
    Default = false
})

teleportToggle:OnChanged(function()
    isTeleportingEnabled = teleportToggle.Value -- Update the teleport enabled state
    if isTeleportingEnabled then
        startTeleporting() -- Start teleporting if the toggle is enabled
        print("Teleportation enabled.")
    else
        print("Teleportation disabled. Stopping the process.")
    end
end)

-- Slider for speed control
local speedControl = Tabs.ValentinesEvent:AddSlider("TeleportSpeedSlider", {
    Title = "Teleport Frequency",
    Description = "Adjust the speed of teleportation (lower values = faster)",
    Default = 0.5,
    Min = 0.1,
    Max = 5,
    Rounding = 0.1,
    Callback = function(value)
        teleportFrequency = value
        print("Teleport Frequency set to:", teleportFrequency)
    end
})

-- Shop toggle implementation
local Toggle = Tabs.Shop:AddToggle("ShopToggle", { Title = "Enable Shop", Default = false })

-- Button for "Dehash Remotes"
Tabs.Shop:AddButton({
    Title = "Dehash Remotes",
    Description = "Must Do when using shop",
    Callback = function()
        print("Dehash Remotes button clicked!")
        dehashRemotes()  -- Call the dehash function
    end
})

Toggle:OnChanged(function()
    if Toggle.Value then
        if not shopGui then
            createShopGui() -- Create shop GUI if it doesn't exist
        end
        shopGui.Enabled = true -- Show the GUI when the toggle is enabled
    else
        if shopGui then
            shopGui.Enabled = false -- Hide the GUI
        end
    end
end)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- Load configuration
SaveManager:LoadAutoloadConfig()
